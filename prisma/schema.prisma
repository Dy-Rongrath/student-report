// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  students Student[]
  reports  Report[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model Student {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  email          String   @unique
  studentId      String   @unique
  dateOfBirth    DateTime?
  enrollmentDate DateTime @default(now())
  class          String?
  avatar         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])
  reports     Report[]

  @@index([createdById])
  @@index([studentId])
  @@index([email])
}

model Report {
  id           String   @id @default(cuid())
  studentId    String
  subject      String
  grade        String
  semester     String
  academicYear String
  teacher      String
  comments     String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  student     Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdById String
  createdBy   User    @relation(fields: [createdById], references: [id])

  @@index([studentId])
  @@index([createdById])
  @@index([academicYear])
}

// Enums
enum UserRole {
  USER
  ADMIN
  TEACHER
}
